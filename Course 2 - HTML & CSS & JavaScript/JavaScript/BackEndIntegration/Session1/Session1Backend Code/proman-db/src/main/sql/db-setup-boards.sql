-- Copyright 2018-2019, https://beingtechie.io

-- Script: db-setup-boards.sql
-- Description: Create board specific tables and grant privileges
-- Version: 1.0
-- Author: Thribhuvan Krishnamurthy

-- # Step 1 - BOARDS table

DROP TABLE IF EXISTS proman.BOARDS CASCADE;
CREATE TABLE IF NOT EXISTS proman.BOARDS (
	ID SERIAL PRIMARY KEY,
    UUID VARCHAR(36) NOT NULL,
    VERSION SERIAL NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(500) NOT NULL,
    OWNER_ID INTEGER NOT NULL,
    STATUS SMALLINT NOT NULL,
    CREATED_BY VARCHAR(100) NOT NULL ,
    CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    MODIFIED_BY VARCHAR(100) NULL,
    MODIFIED_AT TIMESTAMP NULL
);
COMMENT ON TABLE proman.BOARDS IS 'Table to capture boards';
COMMENT ON COLUMN proman.BOARDS.ID IS 'Auto generated PK identifier';
COMMENT ON COLUMN proman.BOARDS.UUID IS 'Unique identifier used as reference by external systems';
COMMENT ON COLUMN proman.BOARDS.VERSION IS 'Versioning for optimistic locking';
COMMENT ON COLUMN proman.BOARDS.NAME IS 'Name of the Board';
COMMENT ON COLUMN proman.BOARDS.DESCRIPTION IS 'Description of the Board';
COMMENT ON COLUMN proman.BOARDS.OWNER_ID IS 'Owner (user) of this Board';
COMMENT ON COLUMN proman.BOARDS.STATUS IS 'Status of the Board - OPEN(0), CLOSED (1), DELETED(2)';
COMMENT ON COLUMN proman.BOARDS.CREATED_BY IS 'User who inserted this record';
COMMENT ON COLUMN proman.BOARDS.CREATED_AT IS 'Point in time when this record was inserted';
COMMENT ON COLUMN proman.BOARDS.MODIFIED_BY IS 'User who modified this record';
COMMENT ON COLUMN proman.BOARDS.MODIFIED_AT IS 'Point in time when this record was modified';

ALTER TABLE proman.BOARDS OWNER TO postgres;
ALTER TABLE proman.BOARDS ADD CONSTRAINT UK_BOARDS_NAME UNIQUE(NAME);
ALTER TABLE proman.BOARDS ADD CONSTRAINT FK_BOARDS_OWNER_ID FOREIGN KEY(OWNER_ID) REFERENCES proman.USERS(ID);

-- # Step 2 - PROJECTS table
DROP TABLE IF EXISTS proman.PROJECTS CASCADE;
CREATE TABLE proman.PROJECTS(
	ID SERIAL PRIMARY KEY,
	UUID VARCHAR(36) NOT NULL,
	VERSION SERIAL NOT NULL,
	BOARD_ID INTEGER NOT NULL,
	OWNER_ID INTEGER NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION VARCHAR(500) NOT NULL,
    START_AT TIMESTAMP NOT NULL,
	END_AT TIMESTAMP,
	STATUS SMALLINT NOT NULL,
	CREATED_BY VARCHAR(100) NOT NULL,
	CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_BY VARCHAR(100),
	MODIFIED_AT TIMESTAMP
);
COMMENT ON TABLE proman.PROJECTS IS 'Table to capture Projects';
COMMENT ON COLUMN proman.PROJECTS.ID IS 'Auto generated PK identifier';
COMMENT ON COLUMN proman.PROJECTS.UUID IS 'Unique identifier used as reference by external systems';
COMMENT ON COLUMN proman.PROJECTS.VERSION IS 'Versioning for optimistic locking';
COMMENT ON COLUMN proman.PROJECTS.BOARD_ID IS 'Board that this Project belongs to';
COMMENT ON COLUMN proman.PROJECTS.OWNER_ID IS 'Owner (user) of this Project';
COMMENT ON COLUMN proman.PROJECTS.NAME IS 'Name of the Project';
COMMENT ON COLUMN proman.PROJECTS.DESCRIPTION IS 'Description of the Project';
COMMENT ON COLUMN proman.PROJECTS.START_AT IS 'Start datetime of the Project';
COMMENT ON COLUMN proman.PROJECTS.END_AT IS 'End datetime of the project';
COMMENT ON COLUMN proman.PROJECTS.STATUS IS 'Status of the Board - OPEN(0), IN PROGRESS(1), ON HOLD(2), COMPLETED(3), DELETED(4)';
COMMENT ON COLUMN proman.PROJECTS.CREATED_BY IS 'User who inserted this record';
COMMENT ON COLUMN proman.PROJECTS.CREATED_AT IS 'Point in time when this record was inserted';
COMMENT ON COLUMN proman.PROJECTS.MODIFIED_BY IS 'User who modified this record';
COMMENT ON COLUMN proman.PROJECTS.MODIFIED_AT IS 'Point in time when this record was modified';

ALTER TABLE proman.PROJECTS OWNER TO postgres;
ALTER TABLE proman.PROJECTS ADD CONSTRAINT FK_PROJECTS_BOARD_ID FOREIGN KEY(BOARD_ID) REFERENCES proman.BOARDS(ID);
ALTER TABLE proman.PROJECTS ADD CONSTRAINT FK_PROJECTS_OWNER_ID FOREIGN KEY(OWNER_ID) REFERENCES proman.USERS(ID);

-- # Step 3 - PROJECT_MEMBERS table
DROP TABLE IF EXISTS proman.PROJECT_MEMBERS CASCADE;
CREATE TABLE IF NOT EXISTS proman.PROJECT_MEMBERS (
   ID SERIAL PRIMARY KEY,
   PROJECT_ID INTEGER NOT NULL,
   MEMBER_ID INTEGER NOT NULL,
   CREATED_BY VARCHAR(100) NOT NULL,
   CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE proman.PROJECT_MEMBERS IS 'Table to map project and members';
COMMENT ON COLUMN proman.PROJECT_MEMBERS.ID IS 'Auto generated PK identifier';
COMMENT ON COLUMN proman.PROJECT_MEMBERS.PROJECT_ID IS 'Project that has these members';
COMMENT ON COLUMN proman.PROJECT_MEMBERS.MEMBER_ID IS 'Members who will be mapped to the Project';
COMMENT ON COLUMN proman.PROJECT_MEMBERS.CREATED_BY IS 'User who inserted this record';
COMMENT ON COLUMN proman.PROJECT_MEMBERS.CREATED_AT IS 'Point in time when this record was inserted';

ALTER TABLE proman.PROJECT_MEMBERS OWNER TO postgres;
ALTER TABLE proman.PROJECT_MEMBERS ADD CONSTRAINT FK_PROJECT_MEMBERS_PROJECT_ID FOREIGN KEY(PROJECT_ID) REFERENCES proman.PROJECTS(ID);
ALTER TABLE proman.PROJECT_MEMBERS ADD CONSTRAINT FK_PROJECT_MEMBERS_MEMBER_ID FOREIGN KEY(MEMBER_ID) REFERENCES proman.USERS(ID);

-- # Step 4 - TASKS table
DROP TABLE IF EXISTS proman.TASKS CASCADE;
CREATE TABLE IF NOT EXISTS proman.TASKS (
    ID SERIAL PRIMARY KEY,
	UUID VARCHAR(36) NOT NULL,
	VERSION SERIAL NOT NULL,
	PROJECT_ID INTEGER NOT NULL,
	PROJECT_MEMBER_ID INTEGER NOT NULL,
    NAME VARCHAR(300) NOT NULL,
    DESCRIPTION VARCHAR(2000) NOT NULL,
    START_AT TIMESTAMP,
	END_AT TIMESTAMP,
	ORIGINAL_EFFORT SMALLINT,
	LOGGED_EFFORT SMALLINT,
	REMAINING_EFFORT SMALLINT,
	STATUS SMALLINT NOT NULL,
	CREATED_BY VARCHAR(100) NOT NULL,
	CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_BY VARCHAR(100),
	MODIFIED_AT TIMESTAMP
);
COMMENT ON TABLE proman.TASKS IS 'Table to capture Tasks';
COMMENT ON COLUMN proman.TASKS.ID IS 'Auto generated PK identifier';
COMMENT ON COLUMN proman.TASKS.UUID IS 'Unique identifier used as reference by external systems';
COMMENT ON COLUMN proman.TASKS.VERSION IS 'Versioning for optimistic locking';
COMMENT ON COLUMN proman.TASKS.PROJECT_ID IS 'Project that this Task belongs to';
COMMENT ON COLUMN proman.TASKS.PROJECT_MEMBER_ID IS 'Task owner who is a member of the Project that this Task belongs to';
COMMENT ON COLUMN proman.TASKS.NAME IS 'Name of the Task';
COMMENT ON COLUMN proman.TASKS.DESCRIPTION IS 'Description of the Task';
COMMENT ON COLUMN proman.TASKS.START_AT IS 'Start datetime of the Task';
COMMENT ON COLUMN proman.TASKS.END_AT IS 'End datetime of the Task';
COMMENT ON COLUMN proman.TASKS.STATUS IS 'Status of the Task - OPEN(0), IN PROGRESS(1), ON HOLD(2), COMPLETED(3), REOPENED(4), CLOSED(5), DELETED(6)';
COMMENT ON COLUMN proman.TASKS.CREATED_BY IS 'User who inserted this record';
COMMENT ON COLUMN proman.TASKS.CREATED_AT IS 'Point in time when this record was inserted';
COMMENT ON COLUMN proman.TASKS.MODIFIED_BY IS 'User who modified this record';
COMMENT ON COLUMN proman.TASKS.MODIFIED_AT IS 'Point in time when this record was modified';

ALTER TABLE proman.TASKS OWNER TO postgres;
ALTER TABLE proman.TASKS ADD CONSTRAINT FK_TASKS_PROJECT_ID FOREIGN KEY(PROJECT_ID) REFERENCES proman.PROJECTS(ID);
ALTER TABLE proman.TASKS ADD CONSTRAINT FK_TASKS_PROJECT_MEMBER_ID FOREIGN KEY(PROJECT_MEMBER_ID) REFERENCES proman.PROJECT_MEMBERS(ID);

-- # Step 4 - TASK_WATCHERS table
DROP TABLE IF EXISTS proman.TASK_WATCHERS CASCADE;
CREATE TABLE IF NOT EXISTS proman.TASK_WATCHERS (
   ID SERIAL PRIMARY KEY,
   TASK_ID INTEGER NOT NULL,
   WATCHER_ID INTEGER NOT NULL,
   CREATED_BY VARCHAR(100) NOT NULL,
   CREATED_AT TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
COMMENT ON TABLE proman.TASK_WATCHERS IS 'Table to map project and members';
COMMENT ON COLUMN proman.TASK_WATCHERS.ID IS 'Auto generated PK identifier';
COMMENT ON COLUMN proman.TASK_WATCHERS.TASK_ID IS 'Project that has these members';
COMMENT ON COLUMN proman.TASK_WATCHERS.WATCHER_ID IS 'Members who will be mapped to the Project';
COMMENT ON COLUMN proman.TASK_WATCHERS.CREATED_BY IS 'User who inserted this record';
COMMENT ON COLUMN proman.TASK_WATCHERS.CREATED_AT IS 'Point in time when this record was inserted';

ALTER TABLE proman.TASK_WATCHERS OWNER TO postgres;
ALTER TABLE proman.TASK_WATCHERS ADD CONSTRAINT FK_PROJECT_MEMBERS_TASK_ID FOREIGN KEY(TASK_ID) REFERENCES proman.TASKS(ID);
ALTER TABLE proman.TASK_WATCHERS ADD CONSTRAINT FK_PROJECT_MEMBERS_WATCHER_ID FOREIGN KEY(WATCHER_ID) REFERENCES proman.USERS(ID);

-- # Step 3 - Commit Transaction
COMMIT;

-- ********** End of setup **********